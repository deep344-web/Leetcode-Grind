Given a binary tree. Find the size of its largest subtree that is a Binary 
Search Tree. Note: Here Size is equal to the number of nodes in the subtree.


  vector <int> largest (Node *root ){
      
    	if(root == NULL)
    	return {1 , 0 , INT_MAX , INT_MIN};
    	
    	if(root->left == NULL && root->right == NULL)
    	return {1 , 1 , root->data , root->data};
    	
    	vector <int> a= largest(root->left);
    	vector <int> b = largest(root->right);
         
       if(a[0] == 1 && b[0] == 1)
       {
           if(root->data > a[3] && root->data < b[2])
           {
               int x = a[2];
               int y = b[3];
               
               if(x == INT_MAX)
               x = root->data;
               
               if(y == INT_MIN)
            y = root->data;
           return {1 , a[1] + b[1] +1 ,x,y };
       }
    	}
    	
    	
    	return {0 , max(a[1], b[1]) , 0 , 0};
    }
    int largestBst(Node *root)
    {
       vector <int> ans = largest(root);
      return ans[1];
    	
    }
