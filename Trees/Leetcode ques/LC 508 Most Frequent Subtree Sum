Problem statement :
Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.

The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).

Code :
 int solve(TreeNode *root, int &max_fre, map<int, int> &fre)
    {
        if(root == NULL)
            return 0;
        
       int l = solve(root->left, max_fre, fre);  
       int r = solve(root->right, max_fre, fre);
        
       int sum = l + r + root->val;
       fre[sum]++;
        
       if(fre[sum] > max_fre)
            max_fre = fre[sum];
        
       return sum; 
    }
    vector<int> findFrequentTreeSum(TreeNode* root) {
        map<int, int> fre;
        int max_fre = 0;
        solve(root, max_fre, fre);
        
        vector<int> v;
        for(auto i = fre.begin(); i != fre.end(); i++)
        {
            if(i->second == max_fre)
            v.push_back(i->first);
        }
        
        return v;
    }