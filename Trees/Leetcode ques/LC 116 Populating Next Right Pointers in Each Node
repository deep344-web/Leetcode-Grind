Problem statement :
You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Code:
 
* Level order traversal - O(N) SPACE, O(N) TIME

class Solution {
public:
    Node* connect(Node* root) {
       if(root == NULL)
           return root;
        
        queue<Node *> q;
        q.push(root);
        
        while(!q.empty()){
            int size = q.size();
            
            for(int i=0; i<size; i++){
                Node *n = q.front();
                q.pop();
                
                if(!q.empty() && i < size-1)
                    n->next = q.front();
                
                else
                    n->next = NULL;
                
                if(n->left)
                    q.push(n->left);
                
                if(n->right)
                    q.push(n->right);
            }
        }
        
        return root;
    }
};

* DFS Soln without space Recursive

class Solution {
public:
   void solve(Node * &root){
          if(root == NULL)
            return;
        
        if(root->left != NULL)
            root->left->next = root->right;
        
        if(root->right != NULL && root->next != NULL)
            root->right->next = root->next->left;
        
        solve(root->left);
        solve(root->right);
        
    }
    
    Node* connect(Node* root) {
        solve(root);
        return root;
    } 
};