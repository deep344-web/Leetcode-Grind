Problem statement :
A complete binary tree is a binary tree in which every level, except possibly the 
last, is completely filled, and all nodes are as far left as possible.

Design an algorithm to insert a new node to a complete binary tree keeping it 
complete after the insertion.

Implement the CBTInserter class:

* CBTInserter(TreeNode root) Initializes the data structure with the root of the 
complete binary tree.
* int insert(int v) Inserts a TreeNode into the tree with value Node.val == val so 
that the tree remains complete, and returns the value of the parent of the inserted 
TreeNode.
* TreeNode get_root() Returns the root node of the tree.

Code :
class CBTInserter {
public:
    queue<TreeNode *> q;
    TreeNode* r;
    CBTInserter(TreeNode* root) {
        r = root;
        queue<TreeNode *> t;
        t.push(root);
        
        while(!t.empty())
        {
            if(t.front()->left != NULL)
                t.push(t.front()->left);
        
            if(t.front()->right != NULL)
                t.push(t.front()->right);
            
            if(t.front()->left == NULL || t.front()->right == NULL )
               q.push(t.front());
            
            t.pop();
        }
    }
    
    int insert(int val) {
        TreeNode *par = q.front();
        TreeNode *n = new TreeNode(val);
        
            if(q.front()->left == NULL)
              q.front()->left = n;
            
            else
            {
              q.front()->right = n;
              q.pop();  
            } 
            
            q.push(n);
        
        return par->val;
    }
    
    TreeNode* get_root() {
        return r;
    }
};

insert operation - O(1) 