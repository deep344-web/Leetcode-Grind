Problem statement :
Given the root of a binary tree, find the maximum value v for which there exist 
different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child 
of a is an ancestor of b.

Code :
 pair<int, int> solve(TreeNode* root, int &ans)
    {
          if(root == NULL)
              return {INT_MAX, INT_MIN};
        
        pair<int, int> l = solve(root->left, ans);
        pair<int, int> r = solve(root->right, ans);
        
        pair<int, int> res;
        res.first = min(root->val, min(l.first, r.first));
        res.second = max(root->val, max(l.second, r.second));
        
        ans = max(ans, 
        max(root->val - res.first, res.second - root->val));
        
        return res;
        
         
    }
    
int maxAncestorDiff(TreeNode* root) {
        int ans = 0;
        solve(root, ans);
        return ans;
        
}