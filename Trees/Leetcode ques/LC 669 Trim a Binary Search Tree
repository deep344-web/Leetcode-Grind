Problem statement :
Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree.

Code :
 TreeNode* solve(TreeNode *root, int low, int high){
        if(root == NULL)
            return NULL;
        
       
        //not in range
        if(root->val < low || root->val > high)
        {
            if(root->val < low)
            {
                root->left = NULL;
                TreeNode *r = solve(root->right, low, high);
                return r;
            }
            
            else
            {
                root->right = NULL;
                TreeNode *l = solve(root->left, low, high);
                
                return l;
            }
        }
        
        
        //elements in range
        else
        {
           root->left = solve(root->left, low, high);
           root->right = solve(root->right, low, high);
            
           return root;
        }       
        
    }
    
    
    TreeNode* trimBST(TreeNode* root, int low, int high) {
       return solve(root, low, high);
    }