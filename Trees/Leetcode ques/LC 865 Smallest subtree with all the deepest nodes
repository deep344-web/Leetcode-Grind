Problem statement :
Given the root of a binary tree, the depth of each node is the shortest distance to the root.

Return the smallest subtree such that it contains all the deepest nodes in the original tree.

A node is called the deepest if it has the largest depth possible among any node in the entire tree.

The subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.

Code :
  void depth(TreeNode *root, int &max_depth, int &nodes, int d)
    {
        if(root == NULL)
            return;
        
        if(d > max_depth)
        {
            max_depth = d;
            nodes = 1;
        }
        else if(d == max_depth)
        {
            nodes++;
        }
        
        depth(root->left, max_depth, nodes, d+1);
        depth(root->right, max_depth, nodes, d+1);
    }
    
    int LCA(TreeNode *root, TreeNode * &lca_headRef, int max_depth, 
            int nodes, int d)
    {
        if(root == NULL)
            return 0;
        
        if(d == max_depth)
        {
            if(nodes == 1) {
                lca_headRef = root;
                return 0;
            } 
            
          return 1;  
        } 
        
        int l = LCA(root->left, lca_headRef, max_depth, nodes, d+1);
        int r = LCA(root->right, lca_headRef, max_depth, nodes, d+1);
        if(l + r == nodes)
        {
            lca_headRef = root;
            return 0;
        }
        
        return l+r;
    }
    
    
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        if(root == NULL)
            return NULL;
        
        int max_depth = -1e9, nodes = 0;
        depth(root, max_depth, nodes, 0);
        
        TreeNode *headRef;
        LCA(root, headRef, max_depth, nodes, 0);
    
        return headRef;
    }