Problem statement :
Given the root of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree.

Note:

The average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.
A subtree of root is a tree consisting of root and all of its descendants.

Code :
pair<int, int> solve(TreeNode *root, int &ans)
    {
       if(root == NULL)
           return {0, 0};
        
        pair<int, int> l = solve(root->left, ans);
        pair<int, int> r = solve(root->right, ans);
        
        int sum = l.first + r.first + root->val;
        int nodes = l.second + r.second + 1;
        int avg = sum / nodes;
        if(avg == root->val)
            ans++;
        
        return {sum, nodes};
        
    }
    
    
    int averageOfSubtree(TreeNode* root) {
        int ans = 0;
        solve(root, ans);
        return ans;
    }