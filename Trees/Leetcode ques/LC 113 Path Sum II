Problem statement :
Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

Code :
 void solve(TreeNode *root, int sum, int &curr_sum,vector<int> &v, 
               vector<vector<int>> &res){
                   
        if(root == NULL)
            return;
        
        if(root->left == NULL && root->right == NULL){
            v.push_back(root->val);
            curr_sum += root->val;
            
           
            if(curr_sum == sum)
                res.push_back(v);
                
            v.pop_back();
            curr_sum -= root->val;
            return;
        }
                   
          v.push_back(root->val);
          curr_sum += root->val;
        
          solve(root->left, sum, curr_sum, v, res);
          solve(root->right, sum, curr_sum, v, res);
                   
          v.pop_back();
          curr_sum -= root->val;
        
    }
    
    
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> res;
        vector<int> v;
        int sum = 0;
        solve(root, targetSum, sum, v, res);
        return res;
    }