Problem statement :
Given two binary search trees root1 and root2, return a list containing all 
the integers from both trees sorted in ascending order.

Code :

space - O(M + N)
class Solution {
public:
    void Inorder(TreeNode* root, vector<int> &res)
    {
        if(root == NULL)
            return;
        
        Inorder(root->left, res);
        res.push_back(root->val);
        Inorder(root->right, res);
    }
    
    vector<int> merge(vector<int> a, vector<int> b){
        int i = 0, j = 0, n = a.size(), m = b.size();
        vector<int> res;
        
        while(i < n && j < m)
        {
            if(a[i] < b[j])
                res.push_back(a[i++]);
            
            else
                res.push_back(b[j++]);
        }
        
        while(i < n)
           res.push_back(a[i++]);
        
        while(j < m)
            res.push_back(b[j++]);
        
        return res;
    }
    
    
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        vector<int> a, b;
        Inorder(root1, a);
        Inorder(root2, b);
        
        return merge(a, b);
    }
};


* Space - O(H1 + H2)
class Solution {
public: 
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        
        stack<TreeNode *> s1;
        stack<TreeNode *> s2;
        TreeNode *p = root1, *q = root2;
        vector<int> res;
        
        while(p || q || !s1.empty() || !s2.empty())
        {
            while(p != NULL)
            {
                s1.push(p);
                p = p->left;
            }
            
            while(q != NULL)
            {
                s2.push(q);
                q = q->left;
            }
            
            //taking element from s1
            if(s2.empty() || (!s1.empty() && (s1.top()->val <= s2.top()->val)))
            {
                TreeNode *node = s1.top();
                s1.pop();
                res.push_back(node->val);
                p = node->right;
            }
                
            //taking element from s2
            else
            {
                TreeNode *node = s2.top();
                s2.pop();
                res.push_back(node->val);
                q = node->right;
            }
        }
        
        return res;

    }
};