Problem statement :
Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest. You may return the result in any order.

Code :
 TreeNode* solve(TreeNode* root, map<int, int> del,  vector<TreeNode *> &res){
        if(root == NULL)
            return NULL;
        
        TreeNode *l = solve(root->left, del, res);
        TreeNode* r = solve(root->right, del, res);
        
        root->left = l;
        root->right = r;

        if(del.find(root->val) != del.end())
        {
            if(root->left)
                res.push_back(root->left);
            
            if(root->right)
                res.push_back(root->right);
            
            delete(root);
            return NULL;
        }
        
        else
            return root;
        
    }
    
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        map<int, int> del;
        vector<TreeNode *> res;
        
        for(int i=0; i<to_delete.size(); i++)
            del[to_delete[i]]++;
        
        if(solve(root, del, res))
            res.push_back(root);
    
        return res;
    }