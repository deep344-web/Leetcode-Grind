Problem statement :
You are given the root of a binary tree.

A ZigZag path for a binary tree is defined as follow:

* Choose any node in the binary tree and a direction (right or left).
* If the current direction is right, move to the right child of the current node; otherwise, move to the left child.
* Change the direction from right to left or from left to right.
* Repeat the second and third steps until you can't move in the tree.

Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).
Return the longest ZigZag path contained in that tree.

Code :
class Solution {
public:
    int ans = 0;
    int solve(TreeNode *root, int dir){    
        if(root == NULL)
            return 0;
        
        int l = 1 + solve(root->left, -1);
        int r = 1 + solve(root->right, 1);
        
        //considering current node as root
        ans = max(ans, max(l, r));
        
        if(dir == -1)
            return r;
        
        else
            return l;
    }
    
    
    int longestZigZag(TreeNode* root) {
        if(root == NULL)
            return 0;
        
        solve(root, -1);
        solve(root,  1);
        
        return ans - 1;
    }
};