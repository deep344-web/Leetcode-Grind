Problem statement :
You have n binary tree nodes numbered from 0 to n - 1 where node i has two 
children leftChild[i] and rightChild[i], return true if and only if all 
the given nodes form exactly one valid binary tree.

If node i has no left child then leftChild[i] will equal -1, similarly for 
the right child. Note that the nodes have no values and that we only use the node numbers 
in this problem.

Code :
class Solution {
public:
    void isConnected(int n, vector<bool> &vis, vector<int>& leftChild, 
                     vector<int>& rightChild, int root){
        
        vis[root] = true;
        
        if(leftChild[root] != -1)
            isConnected(n, vis, leftChild, rightChild, leftChild[root]);
        
        if(rightChild[root] != -1)
            isConnected(n, vis, leftChild, rightChild, rightChild[root]);
    }
    
    
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        
       vector<int> par(n, -1);
    
        for(int i=0; i<n; i++)
        {
            if(leftChild[i] != -1)
            {
                if(par[leftChild[i]] != -1)
                    return false;
                
                par[leftChild[i]] = i;
            }
            
             if(rightChild[i] != -1)
            {
                if(par[rightChild[i]] != -1)
                    return false;
                
                par[rightChild[i]] = i;
            }
            
            
        }
        
        int cnt = 0, root;
        for(int i=0; i<n; i++)
        {
           if(par[i] == -1)
           {
               cnt++;
               root = i;
           }
        }
        
        if(cnt == 1)
        {
            vector<bool> vis(n, false);
            isConnected(n, vis, leftChild, rightChild, root);
            
            for(int i=0; i<n; i++)
            {
                if(vis[i] == false)
                    return false;
            }
            return true;
        }
        return false;
        
    }
};
 