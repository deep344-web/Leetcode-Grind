Problem statement : 
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Code : 
 int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        int low = 0, high = n-1;
        
        while(low <= high){
            int mid = low + (high - low)/2;
            
            int prev = mid > 0 ? nums[mid-1] : -1;
            int next = mid < n-1 ? nums[mid+1] : -1; 
            
            if(nums[mid] != prev && nums[mid] != next){
                return nums[mid];
            }
            
            else if(nums[mid] == prev){
                int right = high - mid;
                if(right % 2)
                    low = mid+1;
                
                else
                   high = mid;  
            }
            
            else{
                 int right = high - mid-1;
                if(right % 2)
                    low = mid;
                
                else
                   high = mid-1;  
            }
            
        }
        
        return -1;
    }