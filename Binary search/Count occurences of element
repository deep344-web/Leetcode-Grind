Problem statement : 
Given a sorted array Arr of size N and a number X, you need to find the number of occurrences of X in Arr.

Code : 
  int first(int *arr, int n, int x){

        int low = 0, high = n-1, mid, res = -1;
        while(low <= high){
            
            mid = low + (high - low)/2;
            
            if(arr[mid] == x)
            {
                res = mid;
                high = mid-1;
            }
            else if(arr[mid] < x)
            {
                low = mid+1;
            }
            
            else
            {
               high = mid-1;   
            }
        }
        
        
        return res;
    }
    
    
    int last(int *arr, int n, int x){
        
        int low = 0, high = n-1, mid, res = -1;
        
        while(low <= high){
            
            mid = low + (high - low)/2;
            
            if(arr[mid] == x)
            {
               res = mid;
               low = mid+1;
            }
            else if(arr[mid] < x)
            {
                low = mid+1;
            }
            
            else
            {
               high = mid-1;   
            }
        }
        
        
        return res;
    }
  
	int count(int arr[], int n, int x) {
	    // code here
	    int f = first(arr, n, x);
	    int l = last(arr, n, x);
	    
	    if(f == -1)
	    return 0;
	    
	    
	    return l - f + 1;
	}