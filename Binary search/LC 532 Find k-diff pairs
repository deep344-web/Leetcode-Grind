Problem statement :
Given an array of integers nums and an integer k, return the number of unique 
k-diff pairs in the array. A k-diff pair is an integer pair (nums[i], nums[j]), 
where the following are true:

* 0 <= i, j < nums.length
* i != j
* nums[i] - nums[j] == k
Notice that |val| denotes the absolute value of val.

Code  
int findPairs(vector<int>& nums, int k) {
        map<int, int> map1;
        
        for(int i=0; i<nums.size(); i++){
            map1[nums[i]]++;
        }

        int cnt = 0;
        for(auto x : map1){
            if(k == 0){
                if(map1[x.first] > 1)
                    cnt++;
            }
            
            else{
                if(map1.find(x.first + k) != map1.end())
                    cnt++;
            }
        }
        
        return cnt;
        
    }: 
