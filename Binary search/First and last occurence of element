Problem statement : 
Given a sorted array having N elements, find the indices of the first and last 
occurrences of an element X in the given array.

Note: If the number X is not found in the array, return '-1' as an array.

Code : 

    int first(vector<int> &arr, int x){
        int low = 0, high = arr.size()-1, mid, res = -1;
        while(low <= high){
            
            mid = low + (high - low)/2;
            
            if(arr[mid] == x)
            {
                res = mid;
                high = mid-1;
            }
            else if(arr[mid] < x)
            {
                low = mid+1;
            }
            
            else
            {
               high = mid-1;   
            }
        }
        
        
        return res;
    }
    
    
    int last(vector<int> &arr, int x){
        int n = arr.size();
        int low = 0, high = arr.size()-1, mid, res = -1;
        
        while(low <= high){
            
            mid = low + (high - low)/2;
            
            if(arr[mid] == x)
            {
               res = mid;
               low = mid+1;
            }
            else if(arr[mid] < x)
            {
                low = mid+1;
            }
            
            else
            {
               high = mid-1;   
            }
        }
        
        
        return res;
    }
  
    vector<int> firstAndLast(vector<int> &arr, int n, int x) {
        // Code here
        int f = first(arr, x);
        int l = last(arr, x);
        
        vector<int> ans;
        ans.push_back(f);
        
        if(l != -1)
        ans.push_back(l);
        
        return ans;
        
    }