Problem statement:
You have n jobs and m workers. You are given three arrays: difficulty, profit, 
and worker where:

difficulty[i] and profit[i] are the difficulty and the profit of the ith job, and
worker[j] is the ability of jth worker (i.e., the jth worker can only complete a 
job with difficulty at most worker[j]). Every worker can be assigned at most one 
job, but one job can be completed multiple times.

For example, if three workers attempt the same job that pays $1, then the total 
profit will be $3. If a worker cannot complete any job, their profit is $0.
Return the maximum profit we can achieve after assigning the workers to the jobs.

Code : 
int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, 
vector<int>& worker) {
        
        int t = profit.size();
        int p = 0;
        vector<int> max_p(t);
        vector<pair<int, int>> v;
      
        for(int i=0; i<t; i++)
           v.push_back({difficulty[i], profit[i]});   
        
        sort(v.begin(), v.end());
        for(int i=0; i<v.size(); i++){
            max_p[i] = i == 0 ? v[i].second : max(v[i].second, max_p[i-1]);
        
        }
        
        
        for(int i=0; i<worker.size(); i++){
            int l = 0, r = v.size()-1,  res = 0;
            while(l <= r){
                int mid = l + (r-l)/2;
                
                if(v[mid].first <= worker[i]){
                    res = max(res, max_p[mid]);
                    l = mid+1;
                }
                
                else
                    r = mid-1;
                
            }
            
            p += res;
            
        }
        
        return p;
    }