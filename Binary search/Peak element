Problem statement : 
A peak element is an element that is strictly greater than its neighbors.
Given an integer array nums, find a peak element, and return its index. If the 
array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž.

Approach : 
What we are essentially doing is going in the direction of the rising slope
(by choosing the element which is greater than current). How does that guarantee 
the result? Think about it, there are 2 possibilities.a) rising slope has to keep 
rising till end of the array b) rising slope will encounter a lesser element and 
go down.
In both scenarios, we will have an answer. 
In a) the answer is the end element because we take the boundary as -INFINITY 
b) the answer is the largest element before the slope falls.


Code :
 int findPeakElement(vector<int>& nums) {
        int n = nums.size();
        int low = 0, high = n-1;
        
        while(low <= high){
            int mid = low + (high - low)/2;
            
            int prev = mid > 0 ? nums[mid-1] : INT_MIN;
            int next = mid < n-1 ? nums[mid+1] : INT_MIN;
            
            if(nums[mid] >= prev && nums[mid] >= next)
                return mid;
            
            
            else if(prev > nums[mid])
                high = mid-1;
            
            
            else
                low = mid+1;
            
        }
        
        return -1;
        
        
        
    }