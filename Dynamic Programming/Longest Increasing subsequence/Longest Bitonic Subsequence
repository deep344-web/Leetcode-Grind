Problem statement : 
Given an array of positive integers. Find the maximum length of Bitonic 
subsequence. A subsequence of array is called Bitonic if it is first increasing,
 then decreasing.


Approach : we know how to find longest increasing subsequence and here if we 
find lis for every index from 0 to n-1 and also lis in reverse order. Then we can 
iterate at every index and find maximum length of bitonic subsequence.

Code : 
int LongestBitonicSequence(vector<int>a)
	{
	    int n = a.size();
	    vector<int> dp1(n, 1), dp2(n, 1);
       
        for(int i=0; i<n; i++){
           for(int j=0; j < i; j++){
               if(a[j] < a[i]){
                   dp1[i] = max(dp1[i], 1 + dp1[j]);
               }
           }
       }
       
       int maxi = 1;
        for(int i=n-1; i >= 0; i--){
           for(int j=n-1; j > i; j--){
               if(a[j] < a[i]){
                   dp2[i] = max(dp2[i], 1 + dp2[j]);
               }
           }
           
           maxi = max(maxi, dp1[i] + dp2[i] -1);
       }
       
       return maxi;
	}