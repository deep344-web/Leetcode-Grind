Problem statement : 
Given a set of N items, each with a weight and a value, represented by the array 
w[] and val[] respectively. Also, a knapsack with weight limit W.
The task is to fill the knapsack in such a way that we can get the maximum profit. Return 
the maximum profit. Each item can be taken any number of times.

Approach : 
Same as 0-1 knapsack with the only difference that here if we use an item once, 
we need not to decrement index to choose different item next time. Here we can 
use one item more than one time. 

Code : 
             ( Recursion + Memoization)

 int func(int ind, int *val, int *wt, int W, vector<vector<int>> &dp){
    
    if(W == 0)
    return 0;
    
    if(ind < 0)
    return 0;
     
     if(dp[ind][W] != -1)
     return dp[ind][W];
     
     
     int notake = func(ind-1, val, wt, W, dp);
     int take = -1e9;
     if(wt[ind] <= W){
         take = val[ind] + func(ind, val, wt, W - wt[ind], dp);
     }
     
     return dp[ind][W] = max(notake, take);
 }


    int knapSack(int N, int W, int val[], int wt[])
    {
      
      vector<vector<int>> dp(N+1, vector<int>(W+1, -1));
     
      int ans = func(N-1, val, wt, W, dp);
      return ans < 0 ? 0 : ans;

    }


    (Tabulation + Space optimization)

 int knapSack(int N, int W, int val[], int wt[])
    {
     vector<int> dp(W+1, -1);
     
     
   for(int i=0; i <= N; i++){
       for(int j=0; j <= W; j++){
           if(i == 0 || j == 0)
           dp[j] = 0;
           
           else{
               int exc = -1e9;
               if(j >= wt[i-1])
                  exc = val[i-1] + dp[j-wt[i-1]];
                  
                int inc = dp[j];
                
                dp[j] = max(inc, exc);
           }
           
       }
   }
   
   return dp[W];
     
    }