Problem statement : 
Given a string 'str' of size ‘n’. The task is to remove or delete the minimum 
number of characters from the string so that the resultant string is a palindrome. Find the minimum numbers of characters we need to remove.

Approach: 
If we will find longest palindromic subsequence of the string and delete the 
length of this string from length of original string we will be left with all 
the chars which are not part of palindromic subsequence and needs to be deleted.


Code: 
int minDeletions(string A, int n) { 
      int m = n;
        string B = A;
        reverse(A.begin(), A.end());
        int dp[m+1][m+1];
        for(int i=0 ; i<m+1 ; i++){
            for(int j=0 ; j<m+1 ; j++){
                if(i == 0 || j == 0)
                dp[i][j] = 0;
                
                else if(B[i-1] == A[j-1])
                dp[i][j] = dp[i-1][j-1] +1;
                
                else 
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
        
        return m - dp[m][m];
} 
