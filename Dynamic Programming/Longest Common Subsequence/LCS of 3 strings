Problem statement : 
Given 3 strings A, B and C, the task is to find the longest common 
sub-sequence in all three given sequences.

Code : 

    int func(int i, int j, int k, string A, string B, string C, 
                vector<vector<vector<int>>> &dp){
        
        if(i < 0 || j < 0 || k < 0)
        return 0;
     
        if(dp[i][j][k] != -1)
        return dp[i][j][k];
     
        int ans = 0;
        if(A[i] == B[j] && B[j] == C[k])
        {
            ans = 1 + func(i-1, j-1, k-1, A, B, C, dp);
        }
        
        else{
          
        ans = max(func(i, j, k-1, A, B, C, dp), max( func(i-1, j, k, A, B, C, dp),
        func(i, j-1, k, A, B, C, dp)));
        
            
        }
        return dp[i][j][k] = ans;
        
    }
    
    
  
int LCSof3 (string A, string B, string C, int n1, int n2, int n3)
{
    vector<vector<vector<int>>> dp(n1, vector<vector<int>>(n2, vector<int>(n3, -1)));
    
     return func(n1-1, n2-1, n3-1, A, B, C, dp);
    
}