Problem statement : 
We can scramble a string s to get a string t using the following algorithm:

* If the length of the string is 1, stop.
* If the length of the string is > 1, do the following:
* Split the string into two non-empty substrings at a random index, i.e., if
  the string is s, divide it to x and y where s = x + y.
* Randomly decide to swap the two substrings or to keep them in the same 
order. i.e., after this step, s may become s = x + y or s = y + x.
* Apply step 1 recursively on each of the two substrings x and y.
Given two strings s1 and s2 of the same length, return true if s2 is a 
scrambled string of s1, otherwise, return false.

Approach : Here we can divide one string at different positions and check
if the parts of the string are scrambled part of the other string.

Code : 
 map<string, bool> dp;
     bool solve(string s1, string s2){
        
         if(s1.length() != s2.length())
             return false;
         
        if(s1 == s2)
            return true;
         
        if(dp.find(s1 +" " + s2) != dp.end())
            return dp[s1 + " " + s2];
         
         int count[26] = {0};
         for(int i=0; i<s1.length(); i++){
             count[s1[i] - 'a']++;
             count[s2[i] - 'a']--;
         }
         
         for(int i=0; i<26; i++){
             if(count[i] != 0)
                 return false;
         }
         
        
        bool flag = false;
        
        for(int k=1; k <= s1.length()-1; k++){
                
            //don't swap
              if(solve(s1.substr(0, k), s2.substr(0, k)) && 
                 solve(s1.substr(k), s2.substr(k)))
                  flag = true;
              
      
            
            //swap
            if(solve(s1.substr(0, k), s2.substr(s2.length()-k)) && 
               solve(s1.substr(k), s2.substr(0, s2.length() - k)))
              flag = true;
        }
            
        dp[s1 + " " + s2] = flag;
        return flag;
    }
    bool isScramble(string s1, string s2) {
      
        return solve(s1, s2);
    }

