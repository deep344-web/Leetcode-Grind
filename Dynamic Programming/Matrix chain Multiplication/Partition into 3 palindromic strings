Problem statement : Given a string s, return true if it is possible to split the 
string s into three non-empty palindromic substrings. Otherwise, return false.​​​​​


Code : 
  int t[2000][3];
    int dp[2000][2000];
    
    bool isPalindrome(string &s, int i, int j){
              while(i <= j){
                  if(s[i] != s[j])
                    return false;
        
                  i++;
                  j--;
         }
    
    return true;
}
    
    bool solve(int i, int j, int k, string &s){
        
        if(k == 0)
        {
           if(i == j || dp[i][j]) 
               return true;
            return false;
        }
        
        if(i > j)
            return false;
        
         if(t[i][k] != -1)
            return t[i][k];
        

         bool ans = false;
        for(int p = i; p < j; p++){
            if(dp[i][p]){
              if(solve(p+1, j, k-1, s))
                  ans = true;
            }
        }
        
        t[i][k] = ans;
        return  ans;
        
        
    }
    void Palindrome(string S) {
         int n = S.length();
        
        memset(dp, 0, sizeof(dp));
        int ans = 0;
        
       for(int gap = 0; gap < n; gap++){
           for(int i=0, j = gap; j < n ; i++, j++){
               if(gap == 0)
               {
                   dp[i][j] = true;
               }
               
               else if(gap == 1)
               {
                   dp[i][j] = S[i] == S[j] ? true : false;
               }
               
               else
               {
                   if(S[i] == S[j] && dp[i+1][j-1])
                   {
                       dp[i][j] = true;
                   }
               }
              
           }
    
    }
    }
    
    bool checkPartitioning(string s) {
        int n = s.length();
        memset(t, -1, sizeof(t));
        Palindrome(s);
        return solve(0, n-1, 2, s);
    }