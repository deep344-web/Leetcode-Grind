Problem statement : 
You are given an integer array prices where prices[i] is the price of a given 
stock on the ith day.On each day, you may decide to buy and/or sell the stock. 
You can only hold at most one share of the stock at any time. However, you can 
buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

Code : 
 int func(int ind, int buy, vector<int> &arr, vector<vector<int>> &dp){
        
        if(ind == arr.size())
            return 0;
        
        if(dp[buy][ind] != -1)
            return dp[buy][ind];
        
        if(buy == 1){
            return dp[buy][ind]= max(-arr[ind] + func(ind+1, 0, arr, dp), 
                                func(ind+1, 1, arr, dp));   
        }
        
        else
        {
            
            return dp[buy][ind] = max(arr[ind] + func(ind+1, 1, arr, dp),
                               func(ind+1, 0, arr, dp));
        
        }
    }
    
    
    int maxProfit(vector<int>& a) {
        int n = a.size();
        vector<vector<int>> dp(n+1, vector<int>(2, 0));
        int prev1 = 0 , prev2 = 0;
        
        for(int i = n-1; i >= 0 ; i--){
          for(int j=0; j < 2; j++){
            
                if(j == 1){
                    prev2 = max(prev1 - a[i], prev2);
                }
                
                else
                {
                    prev1 = max(a[i] + prev2, prev1);
                }
          } 
        
        }
        
        return prev2;
    }