Problem statement : 
You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.

Approach : ** Variation of MCM **
So it is dp problem because we have n choices of balloons each time. So clearly we need explore all possible ways. Now if we pick one balloon at starting and burst it and then we subdivide our problem, it will not work because those sub
problems are not independent of each other. 
eg : [3, 1, 5, 8]
     /      \
    /        \
  [3, 1]     [8] 
  here [3, 1] and [8] are not separate problems because after bursting 5, 1 and 8
  will become neighbours. 

  So instead of deciding which balloon to be burst first, if we decide which balloon to be burst last, second last,... will work some how. So here
     we have imaginary 1's at both side of array
        [1, 3, 1, 5, 8, 1]
    so if I decide to burst 5 last, the points we will get will be 
    1 * 5 * 1 i.e. arr[i-1] * arr[k] * arr[j+1]

  Article : https://leetcode.com/problems/burst-balloons/discuss/892552/For-those-who-are-not-able-to-understand-any-solution-WITH-DIAGRAM

  Code :

   int dp[500][500];
    int solve(int i, int j, vector<int> &nums){
        
        if(i > j)
            return 0;
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        int max_cost = INT_MIN;
        for(int k = i; k <= j; k++){
            int cost = solve(i, k-1, nums) + solve(k+1, j, nums) + 
                        nums[i-1] * nums[k] * nums[j+1];
            
            max_cost = max(max_cost, cost);
        }
        
        return dp[i][j] = max_cost;

    }
    
    
    
    
    int maxCoins(vector<int>& nums) {
        vector<int> arr;
        arr.push_back(1);
        
        for(int i : nums){
            arr.push_back(i);
        }
        
        arr.push_back(1);
        memset(dp, -1, sizeof(dp));
        return solve(1, arr.size()-2, arr);
    }  


Code : 
