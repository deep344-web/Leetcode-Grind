Problem statement : 
You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365.

Train tickets are sold in three different ways:

a 1-day pass is sold for costs[0] dollars,
a 7-day pass is sold for costs[1] dollars, and
a 30-day pass is sold for costs[2] dollars.
The passes allow that many days of consecutive travel.

For example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8.
Return the minimum number of dollars you need to travel every day in the given list of days.

Approach : So here its not always the case that we buy tickets for days which are
in the array. In order to reduce the cost of travel, we can also buy for days 
which are not in array. 


Code : 
 int func(int index, vector<int> &days, vector<int> &costs, vector<int> &travel_days, 
            vector<int> &dp){
        
        if(index > days.size()-1)
        {
            return 0;
        }
        
        if(dp[index] != -1)
            return dp[index];
        
        
        int cost = INT_MAX;
        for(int i=0; i<3; i++){
            int curr_cost = costs[i];
            int day = days[index];
        
            int ind = index+1;
            while(ind < days.size() && days[ind] - day <= travel_days[i] - 1){
                ind++;
            }
            
           cost = min(cost, curr_cost + func(ind , days, costs, travel_days, dp));
            
        }
        
        return dp[index] = cost;
        
    }
    
    
    
    int mincostTickets(vector<int>& days, vector<int>& costs) {
       
        vector<int> travel_days{1, 7, 30};
        
        vector<int> dp(days.size(), -1);
        
        return func(0, days, costs, travel_days, dp);
        
    }