Problem statement : 
You have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).

Given two integers steps and arrLen, return the number of ways such that your pointer still at index 0 after exactly steps steps. Since the answer may be too large, return it modulo 109 + 7.

Approach : Here base case will be when pointer is at 0 or you exhausted the no of
steps. Also if you are k steps away from 0 and your steps left < k then you will 
never be able to reach point 0. So this is also base contd. 

Code : 
 int mod = 1e9 + 7;
    int func(int ind, int steps, int n, vector<vector<int>> &dp){
        
        if(steps == 0 && ind == 0)
            return 1;
        
        if(ind < 0 || ind > n || ind > steps || steps == 0)
            return 0;
        
        if(dp[ind][steps] != -1)
            return dp[ind][steps];
        
        int left  = func(ind-1, steps - 1 , n, dp);
        int right = func(ind+1, steps-1, n, dp);
        int stay  = func(ind, steps-1, n, dp);
        
        return dp[ind][steps] = ((left + right) % mod + stay) % mod;
    }
    
    
    int numWays(int steps, int arrLen) {
        vector<vector<int>> dp(steps/2 + 1, vector<int>(steps+1, -1));
        return func(0, steps , arrLen - 1, dp);
        
        
    }