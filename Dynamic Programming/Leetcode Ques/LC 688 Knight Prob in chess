Problem statement : 
On an n x n chessboard, a knight starts at the cell (row, column) and attempts to
 make exactly k moves. The rows and columns are 0-indexed, so the top-left cell 
 is (0, 0), and the bottom-right cell is (n - 1, n - 1).

A chess knight has eight possible moves it can make, as illustrated below. Each 
move is two cells in a cardinal direction, then one cell in an orthogonal 
direction.

Each time the knight is to move, it chooses one of eight possible moves uniformly
at random (even if the piece would go off the chessboard) and moves there.
The knight continues moving until it has made exactly k moves or has moved off 
the chessboard.
Return the probability that the knight remains on the board after it has stopped 
moving.

Code :
int mod = 1e9 + 7;
    int x[8] = {2, 2, -2, -2, -1, 1, -1, 1};
    int y[8] = {1, -1, 1, -1, -2, -2, 2, 2 };
    double func(int i, int j, int m, int n, int maxMove, 
    vector<vector<vector<double>>> &dp){
       
        if(i < 0 || j < 0 || i > m || j > n)
            return 0;
        
        if(maxMove == 0){
            return 1;
        }
        if(dp[i][j][maxMove] != -1)
            return dp[i][j][maxMove];
        
        double ans = 0;
        
        for(int dir = 0; dir < 8; dir++){
            int p = i + x[dir];
            int q = j + y[dir];
            double prob = (1/8.0) * func(p, q, m, n, maxMove-1, dp);
            ans += prob;
        }
        
        return dp[i][j][maxMove] = ans;
        
    }
    
    
    double knightProbability(int n, int k, int row, int column) 
    {
    vector<vector<vector<double>>> dp(n, 
    vector<vector<double>>(n, vector<double>(k+1, -1)));
        double ans =  func(row, column, n-1, n-1, k, dp);
        return ans;
    } 
