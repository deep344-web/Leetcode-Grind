Problem statement : 
You are a professional robber planning to rob houses along a street. Each 
house has a certain amount of money stashed. All houses at this place are 
arranged in a circle. That means the first house is the neighbor of the 
last one. Meanwhile, adjacent houses have a security system connected, and
 it will automatically contact the police if two adjacent houses were 
 broken into on the same night.

Given an integer array nums representing the amount of money of each house,
return the maximum amount of money you can rob tonight without alerting 
the police.


Code : 
 int rob1(vector<int>& nums) {
        int max_inc = nums[0], max_exc = 0, max_so = max(max_inc, max_exc);
        
        for(int i=1; i<nums.size(); i++){
        
            int temp  = max_inc;
            max_inc =  max_exc + nums[i];
            max_exc = max(max_exc, temp);
        }
        
        return max_inc >= max_exc ? max_inc : max_exc;
        
    }


 int rob(vector<int>& nums) {
        
        if(nums.size() <= 1)
            return nums[0];
        
        if(nums.size() == 2)
            return max(nums[0], nums[1]);
        
        vector<int> nums1(nums.begin(), nums.end()-1), nums2(nums.begin() + 1, nums.end());
        int ans1 = rob1(nums1);
        int ans2 = rob1(nums2);
        return max(ans1, ans2);
    }