Problem statement : 
A die simulator generates a random number from 1 to 6 for each roll. You 
introduced a constraint to the generator such that it cannot roll the number i 
more than rollMax[i] (1-indexed) consecutive times.

Given an array of integers rollMax and an integer n, return the number of 
distinct sequences that can be obtained with exact n rolls. Since the answer may
 be too large, return it modulo 109 + 7.

Two sequences are considered different if at least one element differs from each 
other.

Code : 
 int mod = 1e9 + 7;
    int func(int last_no, int count, int n, vector<int> &roll,                                               vector<vector<vector<int>>> &dp){
        
        if(n == 0)
            return 1;
        
        if(dp[last_no][n][count] != -1)
            return dp[last_no][n][count];
        
        int ways = 0;
        for(int k=1; k <= 6; k++){
            if(k == last_no && count != roll[k-1]){
                ways = (ways + func(last_no, count + 1 , n-1, roll, dp)) % mod;
            }
            
            else if(k != last_no){
               ways = (ways + func(k, 1, n-1, roll, dp)) % mod;
            }
        }
        
        return dp[last_no][n][count] = ways;
        
    }
    
    
    int dieSimulator(int n, vector<int>& rollMax) {
        
    vector<vector<vector<int>>> dp(7, vector<vector<int>>(n+1, 
    vector<int>(16, -1)));
        return func(0, 0, n, rollMax, dp);
    }