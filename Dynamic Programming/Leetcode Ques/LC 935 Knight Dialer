Problem statement : 
The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). 
We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell. Given an integer n, return how many distinct phone numbers of length n we can dial.

You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.

As the answer may be very large, return the answer modulo 109 + 7.

Code : 
int x[8] = {-2, -2, 2, 2, 1, -1, 1, -1};
    int y[8] = {-1, 1, -1, 1, 2, 2, -2, -2};
    int mod = 1e9 + 7;
    
    int func(int i, int j, int k, vector<vector<int>> &keypad,                                              vector<vector<vector<int>>> &dp){
        
        if(i < 0 || j < 0 || i > 3 || j > 2 || keypad[i][j] == -1)
            return 0;
        
         if(k == 0)
            return 1;
        
        if(dp[i][j][k] != -1)
            return dp[i][j][k];
        
        int ans = 0;
        
        for(int dir = 0; dir < 8; dir++){
            int new_i = x[dir] + i;
            int new_j = y[dir] + j;
            
            ans = (ans + func(new_i, new_j, k-1, keypad, dp)) % mod;
        }
        
        return dp[i][j][k] = ans;
        
    }
    
    int knightDialer(int n) {
     
        vector<vector<int>> keypad{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {-1, 0, -1}};
        int nums = 0;
        
        vector<vector<vector<int>>> dp(4, vector<vector<int>>(3, 
        vector<int>(n+1, -1)));
        
        for(int i=0; i<4; i++){
            for(int j=0; j<3; j++){
                if(keypad[i][j] != -1)
                   nums = (nums + func(i, j, n-1, keypad, dp)) % mod;
            }
        }
        
        return nums;
        
    }