Problem statement : 
The demons had captured the princess and imprisoned her in the bottom-right 
corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. 
Our valiant knight was initially positioned in the top-left room and must fight 
his way through dungeon to rescue the princess.
The knight has an initial health point represented by a positive integer. If at 
any point his health point drops to 0 or below, he dies immediately.
Some of the rooms are guarded by demons (represented by negative integers), so 
the knight loses health upon entering these rooms; other rooms are either empty 
(represented as 0) or contain magic orbs that increase the knight's health 
(represented by positive integers).

To reach the princess as quickly as possible, the knight decides to move only 
rightward or downward in each step.

Return the knight's minimum initial health so that he can rescue the princess.

Note that any room can contain threats or power-ups, even the first room the 
knight enters and the bottom-right room where the princess is imprisoned.

Approach : 
we are starting from last cell and go upto first cell. Last followning cell will 
return how much energy knight needs to reach this cell. So if the cell has pos 
integer then energy needed will be 1 just to reach the cell otherwise 
abs(-ve integer) + 1 will be needed. At each cell we will find out which direction
requires minimum energy(down or right) and also we will add the energy requirment
of current cell and send it to upper cell. So integer at given cell is big and 
substracting the (left or down) gives positve value that means we don't need any
extra energy from higher cell to reach this cell, we just need 1. But in case 
it comes out to be -ve then we need that much energy to reach this cell.



Code : 
 int func(int i, int j, int n , int m ,vector<vector<int>> &grid, 
                 vector<vector<int>> &dp){
        
        
        if(i < 0 || j < 0 || i > n || j > m)
            return 1e9;
        
        if(i == n && j == m)
            return grid[i][j] < 0 ? abs(grid[i][j]) + 1 : 1;
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        
        int right = func(i, j+1,n, m, grid, dp);
        int down = func(i+1, j, n, m, grid, dp);
        
        int ans = grid[i][j] - min(right, down);
        if(ans >= 0)
            return dp[i][j] = 1;
        
        else
            return dp[i][j] = abs(ans);
        
        
    }
    
    
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int n = dungeon.size();
        int m = dungeon[0].size();
        vector<vector<int>> dp(n, vector<int>(m, -1));
        return func(0, 0, n-1, m-1, dungeon, dp);
    }