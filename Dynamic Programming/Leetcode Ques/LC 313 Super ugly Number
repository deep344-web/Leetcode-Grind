Problem statement : 
A super ugly number is a positive integer whose prime factors are in the array primes. Given an integer n and an array of integers primes, return the nth super ugly number. The nth super ugly number is guaranteed to fit in a 32-bit signed integer.

Same as ugly number problem we can use same approach but it gives TLE.

Code : 
   int nthSuperUglyNumber(int n, vector<int>& primes) {
          
        if(n <= 1)
            return n;
        
        int pointers[100] = {0};
        int dp[n];
        dp[0] = 1;
        
        for(int i = 1; i < n; i++){
            dp[i] = dp[pointers[0]] * primes[0];
            
            for(int j=1; j<primes.size(); j++){
                
                dp[i] = min(dp[i], dp[pointers[j]] * primes[j]);
            }
            
        
            for(int j=0; j<primes.size(); j++){
                if(dp[i] == dp[pointers[j]] * primes[j])
                {
                    pointers[j]++;
                }
            }
            
        }
        
      return dp[n-1];
    }