Problem statement : 
You are given a triangular array/list 'TRIANGLE'. Your task is to return the 
minimum path sum to reach from the top to the bottom row.
The triangle array will have N rows and the i-th row, where 0 <= i < N will 
have i + 1 elements.
You can move only to the adjacent number of row below each step. For example, if
 you are at index j in row i, then you can move to i or i + 1 index in row j + 1 
 in each step.

Approach : So approach is same but difference here is that we don't have any 
fixed ending point, just have fixed ending row. So we will work accordingly.

Code : 
(Recursion + Memoization)
int path(int i, int j, vector<vector<int>> tri, vector<vector<int>> &dp){
    if(i == tri.size()-1)
        return tri[i][j];
    
    if(dp[i][j] != -1)
        return dp[i][j];
 
    int down= tri[i][j] + path(i+1, j, tri, dp);   //move straight down
    int dia = tri[i][j] + path(i+1, j+1, tri, dp); //move diagonally down
    
    return dp[i][j] = min(down, dia);
}


int minimumPathSum(vector<vector<int>>& triangle, int n){
    
     int m = triangle[n-1].size();
    vector<vector<int>> dp(n, vector<int>(m, -1));
	return path(0, 0, triangle, dp);
}


(Bottom up)

int minimumPathSum(vector<vector<int>>& triangle, int n){

    int m = triangle[n-1].size();
    vector<vector<int>> dp(n, vector<int>(m, -1));
     
    int down, dia;
    for(int i=n-1; i >= 0; i--){
        for(int j = i; j >= 0; j--){
           if(i == n-1){
             dp[i][j] = triangle[i][j];
        }
        else{
            down = triangle[i][j] + dp[i+1][j];
            dia = triangle[i][j] + dp[i+1][j+1];
            dp[i][j] = min(down, dia);
        }
    }
  }
    
    return dp[0][0];
}