Problem statement : 
Ninja has a 'GRID' of size 'R' X 'C'. Each cell of the grid contains some 
chocolates. Ninja has two friends Alice and Bob, and he wants to collect as 
many chocolates as possible with the help of his friends.
Initially, Alice is in the top-left position i.e. (0, 0), and Bob is in the 
top-right place i.e. (0, ‘C’ - 1) in the grid. Each of them can move from their 
current cell to the cells just below them. When anyone passes from any cell, he
will pick all chocolates in it, and then the number of chocolates in that cell 
will become zero. If both stay in the same cell, only one of them will pick the
chocolates in it.
If Alice or Bob is at (i, j) then they can move to (i + 1, j), (i + 1, j - 1) or
(i + 1, j + 1). They will always stay inside the ‘GRID’.
Your task is to find the maximum number of chocolates Ninja can collect with the
help of his friends by following the above rules.

Approach : Here first approach which comes to mind is that find answer for both 
persons separately and add it. But we can't do it as we don't have any idea of 
backtracking to find out which cells alice travelled and which one bob did, because there might be a case where alice and bob has travelled some cells same and we need to subtract that from total ans. So here we need to take alice and bob together. 

Code : 
(Recursion + Memoization)
int ways(int i, int j1, int j2, int r, int c, vector<vector<int>> grid,          vector<vector<vector<int>>> &dp){
    if(j1 > c || j1 < 0 || j2 < 0 || j2 > c){
        return -1e9;
    }
    if(i == r){
        if(j1 == j2)
            return grid[i][j1];
        
        else
            return grid[i][j1] + grid[i][j2];
    }
    
    if(dp[i][j1][j2] != -1)
        return dp[i][j1][j2];
    
    int max_profit = -1e9;
    for(int alice=-1; alice <= 1; alice++){
        for(int bob = -1; bob <= 1; bob++){
            max_profit = max(max_profit, ways(i+1, j1 + alice, j2 + bob,r, c,  grid, dp));
        }
    }
    
   
    if(j1 == j2)
        return dp[i][j1][j2] =  (max_profit + grid[i][j1]);
    
    else
        return dp[i][j1][j2] = (max_profit + grid[i][j1] + grid[i][j2]);
}

int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
   
    vector<vector<vector<int>>> dp(r, vector<vector<int>>(c, vector<int>(c, -1)));
    
    return ways(0, 0, c-1, r-1, c-1, grid, dp);
}


 Tabulation

int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
   
    vector<vector<vector<int>>> dp(r, vector<vector<int>>(c, vector<int>(c, 0)));
    
    for(int j1 = 0; j1 < c; j1++){
        for(int j2=0; j2 < c; j2++){
            if(j1 == j2)
                dp[r-1][j1][j2] = grid[r-1][j1];
            
            else
                dp[r-1][j1][j2] = grid[r-1][j1] + grid[r-1][j2];
        }
    }
    
    for(int i = r-2; i >= 0 ; i--){
        
        for(int j1 = 0; j1 < c; j1++){
        
            for(int j2 = 0; j2 < c; j2++){
            
                int max_profit = -1e9;
                for(int alice = -1; alice <= 1; alice++){
                    for(int bob = -1; bob <= 1; bob++){
                       if(((j1 + alice) < 0) || ((j1 + alice) > c-1) || 
                              ((j2 + bob) < 0) || ((j2 + bob) > c-1) )
                            continue;
            
                        max_profit = max(max_profit, dp[i+1][j1+alice][j2+bob]);
                      
                     }
                }
    
   
                if(j1 == j2)
                   dp[i][j1][j2] =  max_profit + grid[i][j1];
    
                else
                   dp[i][j1][j2] = max_profit + grid[i][j1] + grid[i][j2]; 
            }
        }
    }
    
    return dp[0][0][c-1];
}



Time Complexity : O(N * M * M * 9)
Space Complexity: O(N * M * M)
