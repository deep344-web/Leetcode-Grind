Problem statement : 
Given an array of non-negative integers, and a value sum, determine if there is a 
subset of the given set with sum equal to given sum. 

Approach : Here same as in 0-1 knapsack we have to find if we can form given
sum using some elements of given array. Here also we have 2 choices of either
taking current element or don't take. If we take that then sum will reduce. 
Recursive version will be same. Here I have pasted Bottom up approach. 
 

Code : 

 bool isSubsetSum(int N, int arr[], int sum){
        bool dp[N+1][sum+1];
        for(int i=0 ; i<N+1 ; i++){
            for(int j=0 ; j<sum+1 ; j++){
                if(j == 0)
                dp[i][j] = true;
                
                else 
                dp[i][j] = false;
            }
        }
        
        for(int i=1 ; i<N+1 ; i++){
            for(int j=1; j<sum+1 ; j++){
                if(arr[i-1] <= j)
                {
                    dp[i][j] = dp[i-1][j-arr[i-1]] || dp[i-1][j];
                }
                
                else if(arr[i-1] > j)
                {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        return dp[N][sum];
        
        
    }