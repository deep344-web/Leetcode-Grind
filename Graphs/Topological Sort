
Topo sort can be found for directed acyclic graphs. It consists of the all the 
nodes of the graph in 
way such that node will come before all of its adjacent nodes having incoming 
edges

It can be found using 2 different methods : 
 - DFS
 - Kahn's Algorithm


DFS Function
void dfs(vector<int> adj[], stack<int> &s,  vector<int> &vis, int node){
	    vis[node] = 1;
	    for(int i : adj[node]){
	        if(vis[i] == 0){
	            dfs(adj, s, vis, i);
	        }
	    }
	    
	    s.push(node);
	}


Kahn's Algorithm

	void bfs(vector<int> adj[]){

         vector<int> indegree(V, 0), vis(V, 0), ans;
	  
	    for(int i=0; i<V; i++){
	        for(int j : adj[i]){
	            indegree[j]++;
	        }
	    }
	    
	     queue<int> q;
	    for(int i=0; i<indegree.size(); i++){
	        if(indegree[i] == 0)
	        q.push(i);
	    }
	    
	   
	    while(!q.empty()){
	        int node = q.front();     
	        vis[node] = 1;
	        ans.push_back(node);
	        q.pop();
	        
	        for(int j : adj[node]){
	            indegree[j]--;
	            if(indegree[j] == 0)
	            q.push(j);
	        }
	    }
	    
	}

we will always have atleast one node with indegree 0 in directed acyclic graphs