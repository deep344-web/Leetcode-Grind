Tree edge -> parent - child edge 
Back edge -> from child to any ancestor
forward edge -> from node to any of the descendant
cross edge -> when there  any of above relation is not present

* In this low is keeping track of the lowest ancestor node  this node can visit.
* we update low of current node with help of low of adjacent nodes.
* low of root node will be equal to disc time of the node.
* if we find any adjacent already visited and present in recursive stack then this must be back edge
and we can update low of current node with disc of that node. We can take low of that node
 because that may cause cascading effect.

 int timer = 0;
    
void func(vector<int> adj[], vector<int> &disc, vector<int> &low, 
stack<int> &mystack, vector<bool> &instack, int root, vector<vector<int>> &ans){
        
        disc[root] = timer;
        low[root] = timer;
        timer += 1;
        
        mystack.push(root);
        instack[root] = true;
        
        for(int j : adj[root]){
            if(disc[j] == -1){
                func(adj, disc, low, mystack, instack, j, ans);
                low[root] = min(low[root], low[j]);
            }
            else{

                //low will be updated only when it is back edge and not for cross edges
                if(instack[j]){
                    low[root] = min(low[root], disc[j]);
                }
            }
            
        }
        
        if(low[root] == disc[root]){
            vector<int> vec;
            while(mystack.top() != root){
                int node = mystack.top();
                vec.push_back(node);
                instack[node] = false;
                mystack.pop();
            }
            
            vec.push_back(mystack.top());
            instack[mystack.top()] = false;
            mystack.pop();
            
            sort(vec.begin(), vec.end());
            
            ans.push_back(vec);
        }
        
    }
    
    
    vector<vector<int>> tarjans(int V, vector<int> adj[])
    {
        vector<int> disc(V , -1) , low(V , -1) ;
        vector<bool> instack(V , false);
        stack<int> mystack;
        vector<vector<int>> ans;
        for(int i=0 ; i<V ; i++){
            if(disc[i] == -1)
            {
                func(adj , disc , low , mystack ,instack , i, ans);
            }
        }
        
      sort(ans.begin() , ans.end());
        return ans;  
    }