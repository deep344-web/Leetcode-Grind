Ariticulation points are nodes when deleted (along with edges of that node) breaks the graph into more
number of components than earlier. These can be found with the same concept used in tarjan's algorithm

* If there is root node having more than 1 children then it is AP. For this we keep track of no of children 
and if parent of node is -1 then its root node.
* If non root node has child v such that no node in the subgraph  rooted with v has a back edge to any of
ancestors of non root node, then it is AP. For this if low of adjacent node greater than or equal to
discovery of node then that means we don't have any back edge. 

void func(vector<int> adj[], vector<int> &disc, vector<int> &low, 
       vector<int> &parent, vector<bool> &artic, int node){
           disc[node] = timer;
           low[node] = timer;
           timer += 1;
        
           int child = 0;
    
    
    for(int j : adj[node]){
        if(disc[j] == -1){
           child++;
           parent[j] = node;
           func(adj, disc, low, parent, artic, j);
           low[node] = min(low[node], low[j]);
           
           if(parent[node] == -1 && child > 1)
              artic[node] = true;
           
           else if(parent[node]  != -1 && low[j] >= disc[node])
               artic[node] = true;
           
        }
        
        //here we are not concerned with only backedges, If we find any cross edge also we update low 
        else if(parent[node] != j){
            low[node] = min(low[node], disc[j]);
        }
    }
        
}


vector<int> articulationPoints(int V, vector<int>adj[]) {
    vector<int> disc(V, -1), low(V, -1), parent(V, -1);
    vector<bool> artic(V, false);
    
    for(int i=0; i<V; i++){
        if(disc[i] == -1){
            func(adj, disc, low, parent, artic, i);
        }
    }
    
    vector<int> ans;
    for(int i=0; i<V; i++){
        if(artic[i])
        ans.push_back(i);
    }
    
    if (ans.size() == 0)
    ans.push_back(-1);
    
    return ans;
    
}