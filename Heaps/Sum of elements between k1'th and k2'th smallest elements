Problem statement:
Given an array A[] of N positive integers and two positive integers K1 and K2. 
Find the sum of all elements between K1th and K2th smallest elements of the array. 
It may be assumed that (1 <= k1 < k2 <= n).

Code :
  int kthSmallest(long long arr[], int n, int k) {
        if(k > n)
           return -1;
           
        priority_queue<long long> pq;
        
        for(int i=0; i<n; i++){
            pq.push(arr[i]);
            if(pq.size() > k)
              pq.pop();
        }
        
        long long ans = pq.top();
        return ans;
    }
    
    long long sumBetweenTwoKth( long long A[], long long N, long long K1, long long K2)
    {
        // Your code goes here
        long long a = kthSmallest(A, N, K1);
        long long b = kthSmallest(A, N, K2);
        
        long long sum = 0;
        for(int i=0; i<N; i++)
        {
            if(A[i] > a && A[i] < b)
            sum += A[i];
        }
        
        return sum;
    }