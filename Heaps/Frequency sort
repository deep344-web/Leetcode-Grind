Problem statement :
Given an array A[] of integers, sort the array according to frequency of 
elements. That is elements that have higher frequency come first. If frequencies
of two elements are same, then smaller number comes first.

code :

struct Compare{

   bool operator() (pair<int, int> &p1, pair<int, int> &p2)
   {
       if(p1.first != p2.first)
           return p1.first < p2.first;
        
        else
        return p1.second > p2.second;
   }
};

vector<int> func(int *nums, int n)
{
     unordered_map<int, int> map1;
        for(int i=0; i<n; i++){
            map1[nums[i]]++;
        }
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, Compare> pq; 
   for(auto ele = map1.begin(); ele != map1.end(); ele++)
        {
            pq.push({ele->second, ele->first});
        }
    
        vector<int> ans;
        while(pq.size() > 0){
            int fre = pq.top().first;
            int ele = pq.top().second;
            
            while(fre--)
            ans.push_back(ele);
            
            
            pq.pop();
        }
        
        return ans;
        
}
