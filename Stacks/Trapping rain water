Problem statement :
Given an array arr[] of N non-negative integers representing the height of blocks. 
If width of each block is 1, compute how much water can be trapped between the 
blocks during the rainy season. 

Code :
 long long trappingWater(int arr[], int n){
        vector<int> left_high;
        int left_highest = arr[0], right_highest = arr[n-1];
        
         for(int i=0; i<n; i++){
             if(arr[i] > left_highest)
             left_highest = arr[i];
             
             left_high.push_back(left_highest);
         }
         
         for(int i=left_high.size()-1; i >=0 ; i--){
             if(arr[i] > right_highest)
             right_highest = arr[i];
             
             left_high[i] = min(left_high[i], right_highest) - arr[i];
         }
         
         long long int water_trapped = 0;
         for(int i=0; i<left_high.size(); i++){
             water_trapped += left_high[i];
         }
         
        return water_trapped;
    }