Problem statement :
You are given an integer array nums and an integer k. There is a sliding window 
of size k which is moving from the very left of the array to the very right. You
can only see the k numbers in the window. Each time the sliding window moves 
right by one position. Return the median array for each window in the original 
array.

Approach : 
So we can find window of size k and then sort all the elements in window and 
find mid element  but in that case time complexity will be O(nk Log k). We can 
keep priority queue to keep track of min elements also. So this will lead to time
complexity of O(n log K). Now we can use more efficient data structure multiset
present in our STL. This can hold duplicate elements in sorted form. We keep 
track of middle element from starting and whenever we are deleting the front 
element and adding new element in end to create new window, middle element 
pointer will either increment or decrement. So if the new element which we 
added in window is smaller than the middle element then it is obvious that it 
will be added before the middle element in set and therefore middle element 
pointer will be decremented. Now we have to remove the front element, so if the 
front element is lesser than middle element then it is obvious that the no of 
elements before middle will decrease, so we need to reposition our middle pointer
to correct middle by incrementing it. 

Code: 
  vector<double> medianSlidingWindow(vector<int>& nums, int k) {
        multiset<int> set1(nums.begin(), nums.begin() + k);
        set<int> :: iterator itr;
        itr = next(set1.begin(), k/2);
        int i = 0, j = k;
        vector<double> v;
        
        while(i < nums.size()){
            if(k % 2)
            {
                v.push_back(*itr);
            }
            
            else
            {  
                 double median = (double) ((long) *itr + (long) *prev(itr)) / 2;
               
                v.push_back(median);
            }
            
            if(v.size() == nums.size() - k + 1)
                return v;
            
           set1.insert(nums[j]);
            if(nums[j] < *itr)
            {
                itr--;
            }
            
            if(nums[i] <= *itr)
                itr++;
            
            set1.erase(set1.find(nums[i]));
            i++;
            j++;
            
        }
        
        return v;
    }