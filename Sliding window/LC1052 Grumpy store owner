Problem statement :
There is a bookstore owner that has a store open for n minutes. Every minute, some number of customers enter the store. You are given an integer array customers of length n where customers[i] is the number of the customer that enters the store at the start of the ith minute and all those customers leave after the end of that minute.
On some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and is 0 otherwise.
When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.
The bookstore owner knows a secret technique to keep themselves not grumpy for minutes consecutive minutes, but can only use it once.
Return the maximum number of customers that can be satisfied throughout the day.

Approach :
Find sum of all the customers when store owner is not grumpy and make the 
customer[i] = 0 there. So now we are only left with those values where owner is grumpy. So we can find subarray with maximum sum having size not more than = minutes.


Code : 
 int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {
        
    int i = 0, j = 0, sum = 0, k = minutes, satisfied = 0;
        
        for(int i=0; i<customers.size(); i++){
            if(grumpy[i] == 0){
                satisfied += customers[i];
                
                customers[i] = 0;
             }
        
        }
        
        int max_sum = 0;
        while(j < customers.size()){
            sum += customers[j];
            
            if(j - i + 1 == k)
            {
                max_sum = max(max_sum, sum);
                sum -= customers[i];
                i++;
            }
           j++;
        }
        
        return satisfied + max_sum;
    
    }