Problem statement :
You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0. For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.

Code :
class Solution {
public:
    ListNode* mergeNodes(ListNode* head) {
        ListNode *dummy = new ListNode(0);
        ListNode *ptr = head, *headRef = dummy;
        
        while(ptr->next != NULL)
        {
            ListNode *t = ptr->next;
            int sum = 0;
                
            while(t && t->val != 0){
                sum += t->val;
                t = t->next;
            }
                
            ptr->val = sum;
            dummy->next = ptr;
            dummy = dummy->next;
            ptr = t;
            
        }
        
        dummy->next = NULL;
        return headRef->next;

    }
};