Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x. You should preserve the original relative order of the nodes in each of the two partitions.

Code :
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode *greater = NULL, *smaller = NULL, *ptr = head,                             *greater_head = NULL, *smaller_head = NULL;
        
        while(ptr != NULL)
        {
            if(ptr->val >= x)
            {
               if(greater == NULL)
               {
                   greater = ptr;
                   greater_head = greater;
               }
                else
                {
                    greater->next = ptr;
                    greater = ptr;
                }
            }
            
            else
            {
               if(smaller == NULL)
               {
                   smaller = ptr;
                   smaller_head = smaller;
               }
                else
                {
                    smaller->next = ptr;
                    smaller = ptr;
                }
            }

            ptr = ptr->next;
        }
        
        if(greater != NULL)
            greater->next = NULL;
        
        if(smaller != NULL)
        {
            smaller->next = greater_head;
            return smaller_head;
        }
        
        else {
            return greater_head;
        }
        
    }
};