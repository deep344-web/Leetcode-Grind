Problem statement : 
Suppose you have n integers labeled 1 through n. A permutation of those n 
integers perm (1-indexed) is considered a beautiful arrangement if for every i
 (1 <= i <= n), either of the following is true:
* perm[i] is divisible by i.
* i is divisible by perm[i].
Given an integer n, return the number of the beautiful arrangements that you can construct.


Approach : DP + Bitmask
Here we need to store state of array after fixing elements and if we will use
bitmask out time complexity will reduce. 

Code : 
map<pair<int, int>, int> map1;
    int func(int &bitmask,  int n, int ind){
        
        if(ind == 0)
            return 1;
        
    
        if(map1.find({bitmask, ind}) != map1.end())
        {
             return map1[{bitmask, ind}]; 
        }           
        
        int ways = 0;
    
        for(int i=1; i<= n; i++){
            
            int mask = 1 << (i-1);
            
            //check if ith element is available to be filled at current index
            if((bitmask & mask) == 0 && (ind % i == 0 || i % ind == 0))
            {
            
                //set the ith bit 
                bitmask = bitmask | mask;
                ways += func(bitmask, n, ind-1);
               
                //unset the ith bit
                mask = ~mask;
                bitmask = bitmask & mask;
            }
        }
        
        map1[{bitmask, ind}] = ways;
        
    return ways;
    }
    
    
    int countArrangement(int n) {
        int bm = 0;

        return func(bm, n, n);
    }

