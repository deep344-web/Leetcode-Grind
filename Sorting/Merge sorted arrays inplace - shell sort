Given two sorted arrays arr1[] and arr2[] of sizes n and m in non-decreasing 
order. Merge them in sorted order without using any extra space. Modify arr1 so 
that it contains the first N elements and modify arr2 so that it contains the 
last M elements.

Approach :  we can merge 2 sorted arrays in O(n+m) time by using space of O(n+m). 
If we are not allowed to use space then we can shift elements of second each time
and TC will be O(nm). Now we have one efficient approach i.e Shell sort which 
will sort it in O((n+m)log(n+m)) time.

Code: 

 int findgap(int gap)
        {
            if(gap <= 1)
            return 0;
            
            return (gap / 2) + (gap % 2);
        }
        
        
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
              
            int gap = n+m, i, j;
            
            for(gap = findgap(gap); gap > 0; gap = findgap(gap))
            {
                for(i = 0; i + gap < n; i++)
                {
                    if(arr1[i] > arr1[i+gap])
                    swap(arr1[i], arr1[i+gap]);
                }
            
            
            
            for(j = gap > n ? gap-n : 0; i<n && j<m; i++, j++){
               if(arr1[i] > arr2[j])
                 swap(arr1[i], arr2[j]);
            }
            
            
            if(j < m){
               for(j = 0; j + gap < m; j++)
               {
                   if(arr2[j] > arr2[j+gap])
                   swap(arr2[j], arr2[j+gap]);
               }
            
            }
            
        }
        
            
    } 