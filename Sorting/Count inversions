Problem statement : 

Given an array of integers. Find the Inversion Count in the array. 
Inversion Count: For an array, inversion count indicates how far (or close) the 
array is from being sorted. If array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. 


Approach : 
If there is an array [4, 5, 6] and [1, 2, 3] then we know in final sorted array we
will put 1 first. so that means if i pointer is at 0 in array 1 and j pointer is at
0 in array 2, then if 1 < 4 that means 1 lesser than all the elements in array 1 after 4. so with all of these elements 1 will form inversion count.  

Code : 
long long int merge(long long arr[], long long temp[], long long low, long long high, long long mid){
    
    long long int inv_count = 0;
    int i = low, j = mid+1, k = low;
    
    while(i <= mid && j <= high){
       if(arr[i] <= arr[j]){
           temp[k++] = arr[i++];
       }
       
        else{
            temp[k++] = arr[j++];
            inv_count += (mid - i + 1);
        }
    }
    
    
    while( i <= mid)
    {
        temp[k++] = arr[i++];
    }
    
    while(j <= high){
        temp[k++] = arr[j++];
    }
    
    for(int index=low; index<= high; index++){
        arr[index] = temp[index];
    }
    
    return inv_count;
    
    
}

long long int count(long long arr[], long long temp[], int start, int end){
    
    long long int inv_count = 0;
    
    if(start < end){
        long long  mid = start + (end - start) / 2;
        
        inv_count += count(arr, temp, start , mid);
        inv_count += count(arr, temp, mid+1 , end);
        inv_count += merge(arr, temp, start, end, mid);
    }
    
    return inv_count;
    
}



long long int inversionCount(long long arr[], long long N)
{
    
    long long temp[N];
    return count(arr, temp, 0, N-1);
}
