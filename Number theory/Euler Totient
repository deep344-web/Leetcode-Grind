This function counts the total no of positive integers from 1 to N which are coprime with N i.e GCD of the numbers with N is 1.

Naive approach would be to run loop from 1 to N and for each number check if its GCD with N is 1 or not. This will have complexity of O(N logn). To do it more efficiently we can go with another approach.

If N is prime then count will N only because all the numbers from 1 to N will be having GCD as 1 with N. If N is non prime for example if N is 8 i.e 2^3 then we need to eliminate all the numbers which are having 2 as one of their factor. For finding out those numbers we can divide 8 by 2 (4 numbers from 1 to 8 having 2 as factor).

Phi(N) = Phi(P1^x  * P2^y  * P3^z)       ---> (1)
where P1, P2, P3 are prime factors of N raise to power x, y, z.

Now Phi is multiplicative function i.e we can write eqn (1) as :
Phi(N)  =  Phi(P1^x)  * Phi(P2^y)  *  Phi(P3^z)             ----->  (2)

Now we know how to compute Phi(P1^x)  = P1^x  - (P1^x / P1)  = P1^(x-1)  * (P1  - 1)          ------>   (3)
so we can write eqn (2)  using eqn (3) as :

Phi(N)  = [ P1^(x-1)  * (P1  - 1) ] * [P2^(y-1)  * (P2  - 1) ] * [P3^(z-1)  * (P3  - 1) ] 
Phi(N)  = N * [ ((P1  - 1) / P1)  * ((P2  - 1) / P2)  * ((P3  - 1) / P3)]        -----> (4)

-> so we can compute the Euler Totient using eqn (4)

so we just need prime factors of number to compute the answer. For that we can use seive.


 Code :
 int arr[1000];

 void Phi(int N)
 {
     for(int i=0; i<1000; i++)
         arr[i] = i;

      for(int i= 2; i < 1000; i++){
          if(arr[i] == i){
              for(int j=i; j < 1000; j += i){
                  arr[j] = (arr[j]/i) * (i-1);
              }
          }
      }

      cout<<arr[N];   
 } 