Miller Rabin Theorm is also used to find whether a number is prime or not but in more certain way compared to Fermat Theorm. Acc to fermat's theorm the eqn is : 

(a ^ (n-1)) % n == 1           or           a ^ (n-1) ~ 1 mod p     ---->  (1)

For any n we can say (n -1) = (2^m   *  Odd number). So we can rewrite the 
eqn 1 as : 
(a ^ (2^m * d)) ~ (1 mod p)
((a ^ (2 ^ m * d)) - 1) ~ 0 mod p
we know a^2 - b^2 = (a - b) (a + b)
so (a ^ (2^(m-1) * d) - 1)  (a ^ (2^(m-1) * d) + 1) ~ 0 mod p
(a ^ (2^(m-1) * d) - 1)  (a ^ (2^(m-2) * d) + 1) ...........................................((a ^ d) + 1)  ((a ^ d) - 1) ~~  0 mod p  
so we can expand these expressions further we need to check that if any of these expressions is divisible by p then p is prime number.

int binaryExponentiation(int a, int b, int mod){
    int res = 1;
    while(b)
    {
        if(b % 2){
            res *= a;
            b -= 1;
        }

        else
        {
            a = a*a;
            b = b/2;
        }

    }

    return res % mod;
}

bool check_composite(int n, int a, int d, int s){
    int x = binaryExponentiation(a, d, n);
    if(x == 1 || x == n-1)
       return true;

    for(int i = 1; i < s; i++){
        x = (x * x) % n;
        if(x == n- 1)
           return true;
    }

    return false;
}

bool PrimeOrNot(int n, int iter = 5){
    int d = n-1, s = 0; 
    while(d % 2 == 0)
    {
        d /= 2;
        s++;
    }

    for(int i=0; i<iter; i++){
         int a = 2 + rand() % (n - 3);
         if (check_composite(n, a, d, s))
            return false;
    }

    return true;
}
  